#include <bits/stdint-uintn.h>
#include <gtest/gtest.h>
#include "../src/IP.H"
#include "../src/NetDev.H"
#include "../src/TunIf.H"
#include "../src/ICMP.H"

#include "mocks/NetDevMock.H"
#include "mocks/TunIfMock.H"

#include <vector>
using namespace std;

class ICMP_Test: public ::testing::Test {
    protected:
        IP_Payload getPayload(NetBuf *nb) { 
            return IP_Payload(nb->getBuf(), nb->getSize(), nb);
        }

        const vector<uint8_t> icmp_frame = {0x08, 0x00, 0x4f, 0xff, 0x61, 0xfa, 0x00, 0x01, 0x8f, 0xe1, 0x7f, 0x60, 0x00, 0x00, 0x00, 0x00, 0x76, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37};
        const vector<uint8_t> icmp_bad_frame = {0x0b, 0x00, 0x4f, 0xff, 0x61, 0xfa, 0x00, 0x01, 0x8f, 0xe1, 0x7f, 0x60, 0x00, 0x00, 0x00, 0x00, 0x76, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37};
};


TEST_F(ICMP_Test, validate_icmp_header_checksum) {
    NetBuf nb(icmp_frame);
    IP_Payload payload = getPayload(&nb);
    ASSERT_EQ(0, ICMP::validate_icmp_header_checksum(payload));
}

TEST_F(ICMP_Test, validate_bad_icmp_header_checksum) {
    NetBuf nb(icmp_bad_frame);
    IP_Payload payload = getPayload(&nb);
    ASSERT_NE(0, ICMP::validate_icmp_header_checksum(payload));
}

TEST_F(ICMP_Test, calculate_icmp_header_checksum) {
    NetBuf nb(icmp_frame);
    IP_Payload payload = getPayload(&nb);
    ASSERT_EQ(0xff4f, ICMP::icmp_header_checksum(payload));
}
